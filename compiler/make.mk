COMPILER_LIBNAME := plcompiler
COMPILER_SHARED_LIBRARY := $(COMPILER_DIR)/lib$(COMPILER_LIBNAME).so
COMPILER_STATIC_LIBRARY := $(COMPILER_DIR)/lib$(COMPILER_LIBNAME).a

COMPILER_SOURCE_FILES := $(wildcard $(COMPILER_DIR)/*.c)
COMPILER_OBJECT_FILES := $(patsubst %.c,%.o,$(COMPILER_SOURCE_FILES))
COMPILER_HEADER_FILES := $(wildcard $(COMPILER_DIR)/*.h)
COMPILER_INCLUDE_FLAGS := -I$(PLOBJECT_DIR) -I$(VASQ_INCLUDE_DIR)

COMPILER_DEPS_FILE := $(COMPILER_DIR)/deps.mk
DEPS_FILES += $(COMPILER_DEPS_FILE)

CLEAN_TARGETS += compiler_clean

$(COMPILER_DEPS_FILE): $(COMPILER_SOURCE_FILES) $(COMPILER_HEADER_FILES) $(PLOBJECT_HEADER_FILES) $(VASQ_HEADER_FILES)
	rm -f $@
	for file in $(COMPILER_SOURCE_FILES); do \
	    echo "$(COMPILER_DIR)/`$(CC) $(COMPILER_INCLUDE_FLAGS) -MM $$file`" >> $@ && \
	    echo '\t$$(CC) $$(CFLAGS) -fpic -ffunction-sections $(COMPILER_INCLUDE_FLAGS) -c $$< -o $$@' >> $@; \
	done
include $(COMPILER_DEPS_FILE)

$(COMPILER_SHARED_LIBRARY): $(COMPILER_OBJECT_FILES)
	$(CC) -shared -o $@ $^

$(COMPILER_STATIC_LIBRARY): $(COMPILER_OBJECT_FILES)
	$(AR) rcs $@ $^

compiler_clean:
	rm -f $(COMPILER_SHARED_LIBRARY) $(COMPILER_STATIC_LIBRARY) $(COMPILER_OBJECT_FILES)
