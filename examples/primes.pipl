/*

This is a multi-line comment block.

*/

// This is a single-line comment.

export factor;
export isPrime;

import os;
import math;

source icount(start:Num, finish:Num, step:Num = 1) {
	n=start;
	while n <= finish {
		prod n;
		n+=step;
	}
}

pred Posint(n) {n is Int and n > 0}

source factor(n:Posint) {
	x=n;
	n -> math.sqrt -> s;
	verify s;
	2,icount(3,s,2) -> local {i:
		recompute=false;
		while x%i == 0 {
			prod i;
			x/=i;
			recompute=true;
		}
		if recompute {x -> math.sqrt -> s;}
	}
	if x > 1 {prod x;}
}

sink doCount(x) {
	prod ?STORE+1;
}

pipe isPrime(n:Posint) {
	factor(n) -> firstFactor;
	firstFactor == n;
}

pipe filter(x, y:Bool) {
	if not y {drop;}
	x;
}

sink main {
	os.args[1] -> toInt -> start;
	verify start;
	os.args[2] -> toInt -> finish;
	verify finish;
	if start > finish {end;}
	icount(start,finish) -> @isPrime -> filter -> detour doCount(0):numPrimes -> doPrintLn;
	numPrimes -> doPrintLn;
	prod 0;
}