/*

This is a multi-line comment block.

*/

// This is a single-line comment.

export factor;
export isPrime;

import sys;
import math;

source icount(start:Int, finish:Int, step:Int) -> Int {
    start -> n;
    while n <= finish {
        prod n;
        n+=step;
    }
}

source forever(start:Int, step:Int) -> Int {
    start -> n;
    while true {
        prod n;
        n+=step;
    }
}

source factor(n:Int) -> Int {
    verify (n -> x -> math.sqrt -> s);
    (2, forever(3,2)) -> local (i:Int) {
        false -> recompute;
        while x%i == 0 {
            prod i;
            x/=i;
            true -> recompute;
        }
        if recompute {x -> math.sqrt -> s;}
        if i > s {end;}
    };
    if x > 1 {prod x;}
}

sink doCount(x:Any) {
    prod ?STORE+1;
}

pipe isPrime(n:Int) -> Bool {
    prod (factor(n) -> _) == n;
}

main {
    verify (1 -> sys.argv -> Int -> start);
    verify (2 -> sys.argv -> Int -> finish);
    icount(start,finish,1) -> isPrime.filter -> doCount.detour:num_primes -> doPrintLn;
    ("There were ", num_primes, " primes found.\n") -> doPrint;

    prod 0;
}
