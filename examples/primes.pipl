/*

This is a multi-line comment block.

*/

// This is a single-line comment.

export factor;
export isPrime;

import os;
import math;

source icount(start:Int, finish:Int, step:Int = 1) -> Int {
	start -> n;
	while n <= finish {
		prod n;
		n+=step;
	}
}

source forever(start:Int, step:Int = 1) -> Int {
	start -> n;
	while true {
		prod n;
		n+=step;
	}
}

source factor(n:Int) -> Int {
	verify n -> x -> math.sqrt -> s;
	2,forever(3,2) -> local (i:Int) {
		false -> recompute;
		while x%i == 0 {
			prod i;
			x/=i;
			true -> recompute;
		}
		if recompute {x -> math.sqrt -> s;}
		if i > s {end;}
	}
	if x > 1 {prod x;}
}

sink doCount(...) {
	prod ?STORE+1;
}

sink doTake(x) {
	prod x; end;
}

pipe isPrime(n:Int) -> Bool {
	prod (factor(n) -> doTake) == n;
}

pipe filter(..., y:Bool) -> ... {
	if not y {drop;}
	prod ?ARGS;
}

sink main {
	verify 1 -> os.argv -> toInt -> start;
	verify 2 -> os.argv -> toInt -> finish;
	if start > finish {end;}
	icount(start,finish) -> isPrime.map -> filter -> doCount.detour:numPrimes -> doPrintLn;
	"There were ", numPrimes, " primes found.\n" -> doPrint;
}